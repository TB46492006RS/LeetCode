/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        if (intervals.size() == 0)
            return{};
        sort(intervals.begin(), intervals.end(), 
		    [](const Interval& ia, const Interval& ib) {return ia.start < ib.start; });
        int tsta, tend;
        tsta = intervals[0].start;
        tend = intervals[0].end;
        vector<Interval> res;
        for (auto inter : intervals){
            if (tend < inter.start){
                res.emplace_back(Interval(tsta, tend));
                tsta = inter.start;
                tend = inter.end;
            }
            else{
                tend = tend > inter.end ? tend : inter.end;
            }
        }
        res.emplace_back(Interval(tsta, tend));
        return res;
    }
};
