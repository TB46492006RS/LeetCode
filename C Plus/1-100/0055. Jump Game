贪心算法：每一步都去最优解，且无需保存之前的最优解。
贪心算法中，作出的每步贪心决策都无法改变，因为贪心策略是由上一步的最优解推导下一步的最优解，而上一步之前的最优解则不作保留。

动规算法中，全局最优解中一定包含某个局部最优解，但不一定包含前一个局部最优解，因此需要记录之前的所有最优解。

自己的递归解法针对于能到达的求解速度很快，但是不能到达的判定超出时间限制，仍未解决。
对于大型数组，递归的解法效率还是太低了，直接循环反而快些。递归解法是在跳跃的，而循环解法只是不不断地判断当前位置能走到的最远位置，以及是否能达到目前位置

////////////
    bool canJump(vector<int>& nums) {
        if (!nums.size())
            return false;
        int a = 0;
        for (int i = 0; i != nums.size(); ++i){
            a = max(a, nums[i] + i);
            if (a <= i&&i != nums.size() - 1)
                return false;
        }
        return true;	
    }
