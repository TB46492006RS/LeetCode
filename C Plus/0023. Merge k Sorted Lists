/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 本题可以使用原始的解法，遍历所有的链表，逐渐向其中添加新的最小的节点，但是看了效率比较高的答案，发现基本都是使用标准库的容器实现的，
 说明标准库的容器的效率已经开发的很高了，没必要自己实现，要学会多使用。
不同的想法有
priority_queue，可以直接在添加元素的时候实现排序，但也没有快很多
vector存储listnode节点而不是int值，但是速度没有int值快
////////////////////
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (!lists.size())
            return nullptr;
        vector<int> v;
        for (auto &list : lists){
            for (auto p = list; p != NULL; p = p->next){
                v.push_back(p->val);
            }
        }
        sort(v.begin(), v.end());
        if (!v.size())
            return NULL;
        ListNode* head = new ListNode(v[0]), *re;//注意链表的初始化方式
        re = head;

        for (int i = 1; i != v.size(); ++i){
            ListNode* tem = new ListNode(v[i]);
            head->next = tem;
            head = head->next;
        }
        return re;
    }
};
