class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        //递归在面临大数据时太慢了
        
        //对于每一个格子，到达的路径数等于左边格子的路径数和上边格子的路径数
        //上边一行和左边一行的路径数则默认为1，有障碍为0，且之后为0
        int m = obstacleGrid.size();
        int n = obstacleGrid.front().size();
        if ((m + n) == 0 || obstacleGrid[0][0] == 1)
            return 0;
        for (int i = 0; i < m; ++i)
            if (obstacleGrid[i][0])
                while (i < m)
                    obstacleGrid[i++][0] = 0;
            else
                obstacleGrid[i][0] = 1;
        for (int j = 1; j < n; ++j)
            if (obstacleGrid[0][j])
                while (j < n)
                    obstacleGrid[0][j++] = 0;
            else
                obstacleGrid[0][j] = 1;
        for (int i = 1; i < m; ++i)
            for (int j = 1; j < n; ++j){
                if (obstacleGrid[i][j])
                    obstacleGrid[i][j] = 0;
                else
                    obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1];
            }
        return obstacleGrid[m - 1][n - 1];
    }
};
