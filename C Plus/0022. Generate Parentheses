自己的思想是，对于每一个括号，添加括号只有两种操作，同级与包围，遍历并且避免重复即可。

回溯法思想：针对每一个字符串，都有一定的基本法则，如果左括号少于总数，就可以添加左括号，如果右括号少于左括号，就可以添加左括号，在回溯的过程中，
会自动遍历所有的组合，是一种递归的思想，
递归的思想需要多加熟练！！

std::move(re),这个暂时还不理解，作用是转换为右值引用，提高效率，和swap操作原理类似
虽然不是很理解，但是效果显著，推测函数返回过程中拷贝数组需要很多资源吧，毕竟函数中传递数组一直用的就是引用
//////////////////////
class Solution {
public:
    void addbraket(vector<string> &re, string str, int open, int close, int max)
    {
        if (str.size() == 2 * max)
        {
            re.push_back(str);
            return;
        }

        if (open < max)
        {
            addbraket(re, str + '(', open + 1, close, max);		
        }
        if (close < open)
        {
            addbraket(re, str + ')', open, close + 1, max);
        }
    }
    vector<string> generateParenthesis(int n) {
        vector<string> re;
        addbraket(re, "", 0, 0, n);
        return std::move(re);
    }    
};
///////////////////
class Solution {
public:
    vector<string> generateParenthesis(int n) {
        if (n == 0)
        {
            return{};
        }
        set<string> ss = { "()" };
        vector<string> tem;
        for (int i = 1; i != n; ++i){
            vector<string> vs(ss.cbegin(), ss.cend());
            ss.clear();
            for (auto &s : vs){
                for (auto j = 0; j != s.size();++j){
                    if (s[j] == '('){
                        int count = 1;
                        for (auto i1 = j + 1; i1 != s.size(); ++i1){
                            count = s[i1] == ')' ? --count : ++count;
                            if (!count){							
                                ss.insert(s.substr(0).insert(i1, "()"));
                                ss.insert(s.substr(0).insert(j, "(").insert(i1, ")"));
                                break;
                            }
                        }
                    }
                }
            }
        }
        return vector<string>(ss.cbegin(), ss.cend());
    }
};
