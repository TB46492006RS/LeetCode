 ///////////
 curSum = max(curSum + num, num);核心在于这一句，不要被之前的编程思想所限制，没必要从两端出发，直接向前走即可，只要前面部分的和大于0，前面的部
 分就值得保留，负责就放弃前面部分，从下个数字开始。
 
 所谓分治法，类似于二分法的思想，代码如下：
 int maxSubArray(vector<int>& nums) {
    if (nums.empty()) return 0;
    return helper(nums, 0, (int)nums.size() - 1);
}
int helper(vector<int>& nums, int left, int right) {
    if (left >= right) return nums[left];
    int mid = left + (right - left) / 2;
    int lmax = helper(nums, left, mid - 1);
    int rmax = helper(nums, mid + 1, right);
    int mmax = nums[mid], t = mmax;
    for (int i = mid - 1; i >= left; --i) {
        t += nums[i];
        mmax = max(mmax, t);
    }
    t = mmax;
    for (int i = mid + 1; i <= right; ++i) {
        t += nums[i];
        mmax = max(mmax, t);
    }
    return max(mmax, max(lmax, rmax));
}

////////////
int maxSubArray(vector<int>& nums) {
    if (nums.empty())
        return 0;
    int res = INT_MIN, curSum = 0;
    for (int num : nums) {
        curSum = max(curSum + num, num);//核心
        res = max(res, curSum);
    }
    return res;
}
