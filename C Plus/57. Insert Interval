/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        intervals.emplace_back(newInterval);
        return merge(intervals);//转化问题，能够得到很好的方案
    }

    vector<Interval> merge(vector<Interval>& intervals) {
        sort(intervals.begin(), intervals.end(), [](Interval a, Interval b) {
            return a.start < b.start;
        });
        vector<Interval> res;
        for (const auto &iv : intervals) {
            if (res.empty() || res.back().end < iv.start) {
                res.emplace_back(iv);
            }
            else {
                res.back().end = res.back().end > iv.end ?
                    res.back().end : iv.end;
            }
        }
        return res;
    }
};
