class Solution {
public:
    bool isNumber(string s) {
        //初步思考，使用流的概念

        //但是发现流读到空格及字符时会终止读入，而不是读入失败
        //例如1a1会读入1
        //莫名其妙vs和LeetCode上结果不一样，放弃以上做法
        //而且以上做法有硬性bug，若小数位数很小，则会失败
        //例如0.11 and 0.11 1
        if (s.find_first_of("1234567890") == string::npos)//不含数字
            return false;	
        if (s.find_first_not_of("1234567890 .+-e") != string::npos)//含有非法字符
            return false;
        s.erase(0, s.find_first_not_of(' '));//去除首尾空格
        s.erase(s.find_last_not_of(' ') + 1);
        if (!s.size())//只有空格
            return false;
        if (s.find(' ') != string::npos)//中间插有空格
            return false;
        if (s.front() == 'e' || s.back() == 'e')
            return false;
        int pnum = 0, en = 0;//point number
        for (char c : s)
            switch (c)
            {
            case '.':
                ++pnum;
                break;
            case 'e':
                ++en;
                break;	
            default:
                break;
            }
        if (pnum > 1 || en > 1)//多个小数点、e、-、+
            return false;
        if (en){
            string sl(s, 0, s.find('e') + 1);
            string sr(s, s.find('e') + 1, s.size() - s.find('e'));
            if (sr.find_first_of("-+",1) != string::npos)//正负号
                return false;
            if (sr.find('.') != string::npos)
                return false;
            if (sl.find_first_of("-+",1) != string::npos)
                return false;
            if (sl.find_first_of("1234567890") == string::npos ||
                sr.find_first_of("1234567890") == string::npos)//左右侧不含数字
                return false;
        }
        else{
            if (s.find_first_of("-+",1) != string::npos)//find_last_of是从指定位置向前找的
                return false;
        }
        return true;
    }
};
